'use strict'

const chai = require('chai')
const sino = require('..')

chai.should()

describe('Sino Number 包', function () {
  describe('#安全性检查', function () {
    function throws(callback, errmsg, valid, append) {
      let list = [null, false, '', [], () => { }, 0.1, true]
      if (append) list = list.concat(append)
      list.forEach(item => {
        const test = () => callback(item)
        test.should.throw(TypeError, errmsg)
      })
      valid.forEach(item => {
        const test = () => callback(item)
        test.should.not.throw()
      })
    }
    describe('## numberToSino 方法', function () {
      it('首参数应为整数', function () { throws(sino.numberToSino, '数字换算为汉字时，首参数非整数', [], [undefined, {}]) })
      it('第二参数对像各属性应为真值', function () { throws(arg => sino.numberToSino(1, arg), '数字换算为汉字时，第二参数对像各属性应为真值', [{ da: false }, { yi: false }, { er: false }, { jishi: false }, { wanyi: true }, { chu: true }], [{ da: 1 }, { yi: 1 }, { er: 1 }, { jishi: 1 }, { wanyi: 1 }, { chu: 1 }]) })
    })
  })
  describe('#属性检查', function () { })
  describe('#行为检查', function () {
    describe('## numberToSino 方法', function () {
      it('平书', function () {
        sino.numberToSino(0).should.equal('零')
        sino.numberToSino(1).should.equal('一')
        sino.numberToSino(2).should.equal('二')
        sino.numberToSino(3).should.equal('三')
        sino.numberToSino(4).should.equal('四')
        sino.numberToSino(5).should.equal('五')
        sino.numberToSino(6).should.equal('六')
        sino.numberToSino(7).should.equal('七')
        sino.numberToSino(8).should.equal('八')
        sino.numberToSino(9).should.equal('九')
        sino.numberToSino(10).should.equal('十')
        sino.numberToSino(-0).should.equal('零')
        sino.numberToSino(-1).should.equal('负一')
        sino.numberToSino(-2).should.equal('负二')
        sino.numberToSino(-3).should.equal('负三')
        sino.numberToSino(-4).should.equal('负四')
        sino.numberToSino(-5).should.equal('负五')
        sino.numberToSino(-6).should.equal('负六')
        sino.numberToSino(-7).should.equal('负七')
        sino.numberToSino(-8).should.equal('负八')
        sino.numberToSino(-9).should.equal('负九')
        sino.numberToSino(-10).should.equal('负十')
      })
      it('大写数字', function () {
        const opts = { da: true }
        sino.numberToSino(0, opts).should.equal('零')
        sino.numberToSino(1, opts).should.equal('壹')
        sino.numberToSino(2, opts).should.equal('贰')
        sino.numberToSino(3, opts).should.equal('叁')
        sino.numberToSino(4, opts).should.equal('肆')
        sino.numberToSino(5, opts).should.equal('伍')
        sino.numberToSino(6, opts).should.equal('陆')
        sino.numberToSino(7, opts).should.equal('柒')
        sino.numberToSino(8, opts).should.equal('捌')
        sino.numberToSino(9, opts).should.equal('玖')
        sino.numberToSino(10, opts).should.equal('拾')
        sino.numberToSino(-0, opts).should.equal('零')
        sino.numberToSino(-1, opts).should.equal('负壹')
        sino.numberToSino(-2, opts).should.equal('负贰')
        sino.numberToSino(-3, opts).should.equal('负叁')
        sino.numberToSino(-4, opts).should.equal('负肆')
        sino.numberToSino(-5, opts).should.equal('负伍')
        sino.numberToSino(-6, opts).should.equal('负陆')
        sino.numberToSino(-7, opts).should.equal('负柒')
        sino.numberToSino(-8, opts).should.equal('负捌')
        sino.numberToSino(-9, opts).should.equal('负玖')
        sino.numberToSino(-10, opts).should.equal('负拾')
      })
      it('万以内一', function () {
        sino.numberToSino(10).should.equal('十')
        sino.numberToSino(100).should.equal('百')
        sino.numberToSino(1000).should.equal('千')
        sino.numberToSino(1001).should.equal('千零一')
        sino.numberToSino(1010).should.equal('千零十')
        sino.numberToSino(1011).should.equal('千零十一')
        sino.numberToSino(1100).should.equal('千百')
        sino.numberToSino(1101).should.equal('千百零一')
        sino.numberToSino(1110).should.equal('千百十')
        sino.numberToSino(1111).should.equal('千百十一')
      })
      it('万以内两廿', function () {
        sino.numberToSino(2000).should.equal('两千')
        sino.numberToSino(2002).should.equal('两千零二')
        sino.numberToSino(2020).should.equal('两千零二十')
        sino.numberToSino(2022).should.equal('两千零廿二')
        sino.numberToSino(2200).should.equal('两千两百')
        sino.numberToSino(2202).should.equal('两千两百零二')
        sino.numberToSino(2220).should.equal('两千两百二十')
        sino.numberToSino(2222).should.equal('两千两百廿二')
      })
      it('万以内带一', function () {
        const opts = { yi: true }
        sino.numberToSino(1000, opts).should.equal('一千')
        sino.numberToSino(1001, opts).should.equal('一千零一')
        sino.numberToSino(1010, opts).should.equal('一千零一十')
        sino.numberToSino(1011, opts).should.equal('一千零一十一')
        sino.numberToSino(1100, opts).should.equal('一千一百')
        sino.numberToSino(1101, opts).should.equal('一千一百零一')
        sino.numberToSino(1110, opts).should.equal('一千一百一十')
        sino.numberToSino(1111, opts).should.equal('一千一百一十一')
      })
      it('万以内二千二百及大写', function () {
        const opts = { er: true, da: true }
        sino.numberToSino(2000, opts).should.equal('贰仟')
        sino.numberToSino(2002, opts).should.equal('贰仟零贰')
        sino.numberToSino(2020, opts).should.equal('贰仟零贰拾')
        sino.numberToSino(2022, opts).should.equal('贰仟零廿贰')
        sino.numberToSino(2200, opts).should.equal('贰仟贰佰')
        sino.numberToSino(2202, opts).should.equal('贰仟贰佰零贰')
        sino.numberToSino(2220, opts).should.equal('贰仟贰佰贰拾')
        sino.numberToSino(2222, opts).should.equal('贰仟贰佰廿贰')
      })
      it('万以上一', function () {
        sino.numberToSino(1e4).should.equal('万')
        sino.numberToSino(1e5).should.equal('十万')
        sino.numberToSino(1e6).should.equal('百万')
        sino.numberToSino(1e7).should.equal('千万')
        sino.numberToSino(1e8).should.equal('亿')
        sino.numberToSino(1e9).should.equal('十亿')
        sino.numberToSino(1e10).should.equal('百亿')
        sino.numberToSino(1e11).should.equal('千亿')
        sino.numberToSino(1e12).should.equal('万亿')
        sino.numberToSino(11111).should.equal('万千百十一')
        sino.numberToSino(11111, { yi: true }).should.equal('一万一千一百一十一')
        sino.numberToSino(10001).should.equal('万零一')
        sino.numberToSino(100010001).should.equal('亿零一万零一')
      })
      it('两万两亿两万亿两兆两万兆两亿兆两万亿兆', function () {
        sino.numberToSino(2e4).should.equal('两万')
        sino.numberToSino(2e8).should.equal('两亿')
        sino.numberToSino(2e12).should.equal('两万亿')
        sino.numberToSino(2e16).should.equal('两兆')
        sino.numberToSino(2e20).should.equal('两万兆')
      })
      it('二三四十', function () {
        sino.numberToSino(200040).should.equal('二十万零四十')
        sino.numberToSino(2100000031).should.equal('廿一亿零卅一')
        sino.numberToSino(4100310021, { jishi: true }).should.equal('四十一亿零三十一万零二十一')
      })
      it('兆亿万', function () {
        const opts = { wanyi: true }
        sino.numberToSino(2e4, opts).should.equal('两万')
        sino.numberToSino(2e8, opts).should.equal('两亿')
        sino.numberToSino(2e12, opts).should.equal('两兆')
        sino.numberToSino(41001100000020, opts).should.equal('卌一兆零十一亿零二十')
      })
      it('初几', function () {
        const opts = { chu: true }
        sino.numberToSino(1, opts).should.equal('初一')
        sino.numberToSino(10, opts).should.equal('初十')
        sino.numberToSino(11, opts).should.equal('十一')
        opts.da = true
        sino.numberToSino(2, opts).should.equal('初贰')
        sino.numberToSino(7, opts).should.equal('初柒')
        sino.numberToSino(100, opts).should.equal('佰')
      })
    })
  })
})